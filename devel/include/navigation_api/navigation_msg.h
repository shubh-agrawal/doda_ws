// Generated by gencpp from file navigation_api/navigation_msg.msg
// DO NOT EDIT!


#ifndef NAVIGATION_API_MESSAGE_NAVIGATION_MSG_H
#define NAVIGATION_API_MESSAGE_NAVIGATION_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace navigation_api
{
template <class ContainerAllocator>
struct navigation_msg_
{
  typedef navigation_msg_<ContainerAllocator> Type;

  navigation_msg_()
    : start_point()
    , destination()
    , current_address()
    , target_heading(0.0)  {
    }
  navigation_msg_(const ContainerAllocator& _alloc)
    : start_point(_alloc)
    , destination(_alloc)
    , current_address(_alloc)
    , target_heading(0.0)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _start_point_type;
  _start_point_type start_point;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _destination_type;
  _destination_type destination;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _current_address_type;
  _current_address_type current_address;

   typedef double _target_heading_type;
  _target_heading_type target_heading;




  typedef boost::shared_ptr< ::navigation_api::navigation_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navigation_api::navigation_msg_<ContainerAllocator> const> ConstPtr;

}; // struct navigation_msg_

typedef ::navigation_api::navigation_msg_<std::allocator<void> > navigation_msg;

typedef boost::shared_ptr< ::navigation_api::navigation_msg > navigation_msgPtr;
typedef boost::shared_ptr< ::navigation_api::navigation_msg const> navigation_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navigation_api::navigation_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navigation_api::navigation_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace navigation_api

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'navigation_api': ['/home/pi/doda_ws/src/navigation_api/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/home/pi/doda_ws/src/geometry_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::navigation_api::navigation_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation_api::navigation_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation_api::navigation_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation_api::navigation_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation_api::navigation_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation_api::navigation_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navigation_api::navigation_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51b60498bf4e994c9492c39d811cc65e";
  }

  static const char* value(const ::navigation_api::navigation_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51b60498bf4e994cULL;
  static const uint64_t static_value2 = 0x9492c39d811cc65eULL;
};

template<class ContainerAllocator>
struct DataType< ::navigation_api::navigation_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navigation_api/navigation_msg";
  }

  static const char* value(const ::navigation_api::navigation_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navigation_api::navigation_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string start_point\n\
string destination\n\
string current_address\n\
float64 target_heading \n\
";
  }

  static const char* value(const ::navigation_api::navigation_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navigation_api::navigation_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_point);
      stream.next(m.destination);
      stream.next(m.current_address);
      stream.next(m.target_heading);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct navigation_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navigation_api::navigation_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navigation_api::navigation_msg_<ContainerAllocator>& v)
  {
    s << indent << "start_point: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.start_point);
    s << indent << "destination: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.destination);
    s << indent << "current_address: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.current_address);
    s << indent << "target_heading: ";
    Printer<double>::stream(s, indent + "  ", v.target_heading);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVIGATION_API_MESSAGE_NAVIGATION_MSG_H
